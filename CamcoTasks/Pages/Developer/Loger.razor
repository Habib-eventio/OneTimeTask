@page "/logger"
@using System.IO
@using CamcoTasks.Library

<div class="container">
    @if (IsPublish)
    {
        <div>
            <div class="form-group col-md-6 m-auto">
                <label for="exampleInputEmail1">Enter Password:</label>
                <input type="password" @bind-value="Password" class="form-control p-1" id="exampleInputEmail1" aria-describedby="emailHelp">
                <small id="emailHelp" class="form-text text-muted p-1">
                    @if (Error != null)
                    {
                        <p class="text-danger">*@Error</p>
                    }
                </small>
                <button type="submit" class="btn btn-primary" @onclick="(e => Authenticate(Password))">Submit</button>
            </div>
        </div>

        @if (IsActive)
        {
            if (Files != null)
            {
                <div class="row p-2">
                    <div class="col-md-12 m-auto">
                        <table class="table">
                            <thead class="thead-light">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">File Name</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int count = 1;
                                }
                                @foreach (var file in Files)
                                {
                                    <tr>
                                        <th scope="row">@count</th>
                                        <td><a href="javascript:void(0)" data-toggle="modal" data-target="#logModal" @onclick="(e => LodDeails(file))">@file.Name</a></td>
                                        <td><a href="javascript:void(0)" @onclick="(e => Delete(file))"><i class="fa-solid fa-trash-can"></i></a></td>
                                    </tr>
                                    count++;
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }

        }

        <!-- Log Modal -->
        <div class="modal fade" id="logModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        @if (SelectFile != null)
                        {
                            <h5 class="modal-title" id="staticBackdropLabel">@SelectFile.Name</h5>
                        }
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body bg-dark">
                        @if (SelectFile != null)
                        {
                            <p class="text-light">@File.ReadAllText(SelectFile.FullName)</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col m-auto text-center">
                <h3 class="text-danger">This allows for only publish mode...</h3>
            </div>
        </div>
    }

    
</div>


@code{
    private IEnumerable<FileInfo> Files { get; set; }
    private bool IsActive { get; set; } = false;
    private FileInfo SelectFile { get; set; }
    private string Password { get; set; }
    private string Error { get; set; }
    private bool IsPublish { get; set; } = true;

    protected override void OnInitialized()
    {
        LoadLog();
    }

    private void Authenticate(string password)
    {
        if (AppInformation.CheckLogerAuthentication(password))
        {
            IsActive = true;
            LoadLog();
            Error = null;
        }
        else
            Error = "Your password is worng.";
    }

    private void LoadLog()
    {
        try
        
        {
            DirectoryInfo directoryPath = new DirectoryInfo(AppInformation.Logpath);
            Files = directoryPath.EnumerateFiles("*");
        }
        catch(Exception ex)
        {
            if (ex != null)
                IsPublish = false;
        }

    }

    private void LodDeails(FileInfo file)
    {
        SelectFile = file;
    }

    private void Delete(FileInfo file)
    {
        try
        {
            if (File.Exists(file.FullName))
            {
                SelectFile = null;
                File.Delete(file.FullName);
                LoadLog();
            }
        }
        catch(Exception ex)
        {
            throw ex;
        }

    }
}