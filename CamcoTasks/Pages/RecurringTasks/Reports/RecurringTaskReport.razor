@page "/RecurrintTaskReport"
@using CamcoTasks.ViewModels.TasksRecTasksDTO;

<div class="col-12 navbar navbar-expand screenLabel position-fixed top-row m-0 p-0 screenLabelStyle">
    <div class="col-12 m-0 p-0" style="font-size: 18px; text-align: left;"><span style="float: left">Ma / Me / ReTaRe</span></div>
</div>

<div id="storedScreenshot"></div>
@if (IsSpinner)
{
    <Loading />
}
else
{
    <div class="ml-3">
        <div class="row custom-top mt-1" style="margin-top: -20px; ">
            <div class="col-md-5 text-left">
                <div class="pt-2">
                    <h3 style="font-weight:bold">
                        RECURRING TASKS (@RecTasksCount)
                    </h3>
                    <p>
                        <label style="font-size:20px;">
                            @if (CompletedOnTimeCount1 >= 50)
                            {
                                <span> 1 Month: </span>

                                <span style="color:#179B09">(@CompletedOnTimeCount1%)</span>
                            }
                            else
                            {
                                <span> 1 Month: </span>

                                <span style="color:#CA0000">(@CompletedOnTimeCount1%)</span>
                            }
                            @if (CompletedOnTimeCount3 >= 50)
                            {
                                <span> | 3 Month: </span>

                                <span style="color:#179B09">(@CompletedOnTimeCount3%)</span>
                            }
                            else
                            {
                                <span> | 3 Month: </span>

                                <span style="color:#CA0000">(@CompletedOnTimeCount3%)</span>
                            }
                            @if (CompletedOnTimeCount6 >= 50)
                            {
                                <span> | 6 Month: </span> <span style="color:#179B09">(@CompletedOnTimeCount6%)</span>
                            }
                            else
                            {
                                <span> | 6 Month: </span> <span style="color:#CA0000">(@CompletedOnTimeCount6%)</span>
                            }
                            @if (CompletedOnTimeCount12 >= 50)
                            {
                                <span> | 12 Month: </span> <span style="color:#179B09">(@CompletedOnTimeCount12%)</span>
                            }
                            else
                            {
                                <span> | 12 Month: </span> <span style="color:#CA0000">(@CompletedOnTimeCount12%)</span>
                            }
                        </label>
                    </p>
                    <p>
                        <label style="font-size:20px;">
                            @if (CompletedOnTimeTotalCount >= 50)
                            {
                                <span>Overall Percentage: </span>

                                <span style="color:#179B09">(@CompletedOnTimeTotalCount%)</span>
                            }
                            else
                            {
                                <span>Overall Percentage: </span>

                                <span style="color:#CA0000">(@CompletedOnTimeTotalCount%)</span>
                            }
                        </label>
                    </p>
                </div>
            </div>
        </div>

        @if (EmployeesButtons.Any())
        {
            <div class="row">
                <a href="javascript:void(0);" class="btn btn-primary btn-block btn-sm p-1" style="width: 200px; margin-top: 5px; margin-right: 5px; height: 35px; background-color:@(AllEmployeesColor)" role="button" data-placement="top" data-original-title="ReAssign TASKS" @onclick="(() => FilterFields(AllEmployees))">@(AllEmployees) | @(AllEmployeesPercentage)%</a>
                @foreach (var employee in EmployeesButtons)
                {
                    <a href="javascript:void(0);" class="btn btn-primary btn-block btn-sm p-1" style="width: 210px; margin-top: 5px; margin-right: 5px; height: 35px; background-color:@(employee.Color)" role="button" data-placement="top" data-original-title="ReAssign TASKS" @onclick="(() => FilterFields(employee.EmployeeName))">@(employee.EmployeeName) | @(employee.Percentage)%</a>
                }
            </div>
        }

        <br />
        @if (Tasks != null)
        {
            <div class="content-wrapper">
                <div class="row YellowText" style="height: 76vh;">
                    <SfGrid @ref="RecurringTasksGrid" AllowPaging="true" PrintMode="PrintMode.AllPages" DataSource="@Tasks" ID="Reccontainer" Query="GridQuery"
                            AllowSelection="true" AllowSorting="true"
                            AllowFiltering="true" Width="100%" AllowTextWrap="true" EnableHover="false" RowHeight="38" Toolbar="@Toolbaritems">
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridPageSettings PageSize="100"></GridPageSettings>
                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
                        <Syncfusion.Blazor.Grids.GridEvents OnToolbarClick="StartPrinting"
                                                            OnActionComplete="StartFilteringGrid"
                                                            TValue="TasksRecTasksViewModel"></Syncfusion.Blazor.Grids.GridEvents>
                        <GridColumns>
                            <GridColumn TextAlign="TextAlign.Left" HeaderTextAlign="TextAlign.Left" AllowFiltering="false"
                                        Field=@nameof(TasksRecTasksViewModel.Id) HeaderText="ID" Width="65" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Menu })"></GridColumn>
                            <GridColumn TextAlign="TextAlign.Left" HeaderTextAlign="TextAlign.Left" Width="150"
                                        Field=@nameof(TasksRecTasksViewModel.PersonResponsible) HeaderText="PERSON RESPONSIBLE" Visible="true" IsPrimaryKey="false"></GridColumn>
                            <GridColumn TextAlign="TextAlign.Left" HeaderTextAlign="TextAlign.Left" AllowFiltering="false"
                                        Field=@nameof(TasksRecTasksViewModel.DateCompleted) HeaderText="COMPLETED DATE" Width="135" Format="MM/dd/yyyy" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.Menu })"></GridColumn>
                            <GridColumn TextAlign="TextAlign.Left" HeaderTextAlign="TextAlign.Left" Field=@nameof(TasksRecTasksViewModel.UpcomingDate)
                                        HeaderText="DUE DATE" Format="MM/dd/yyyy" Width="80" AllowFiltering="false">
                                <Template>
                                    @{
                                        var task = context as TasksRecTasksViewModel;
                                        if (task.UpcomingDate < DateTime.Today && task.UpcomingDate.HasValue)
                                        {
                                            <label style="font-weight:bold; color:red"> @task.UpcomingDate.Value.ToString("MM/dd/yyyy") </label>
                                        }
                                        else
                                        {
                                            <label> @task.UpcomingDate.Value.ToString("MM/dd/yyyy") </label>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn TextAlign="TextAlign.Left" HeaderTextAlign="TextAlign.Left" Width="130"
                                        Field=@nameof(TasksRecTasksViewModel.Initiator) HeaderText="INITIATOR" AllowFiltering="false"></GridColumn>
                            <GridColumn TextAlign="TextAlign.Left" HeaderTextAlign="TextAlign.Left"
                                        Field=@nameof(TasksRecTasksViewModel.Frequency) HeaderText="FREQUENCY" Width="140"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        }
        else
        {
            <p><em>LOADING...</em></p>
        }
    </div>

    <style type="text/css" class="cssStyles">
        .e-grid .e-ftrchk {
            padding-bottom: 2px;
            padding-top: 2px;
        }

        .e-grid .e-altrow {
            /*background-color: #DBD7E3;*/
            background-color: #EBEBEB;
        }

        .EmailGrid .e-grid .e-altrow {
            background-color: white !important;
        }

        .FailGrid .e-grid .e-rowcell {
            text-transform: uppercase;
            font-size: 12px;
        }

        .e-grid .e-headercell {
            background-color: #24202C;
            font-size: 10px
        }

        .e-grid .e-rowcell {
            text-transform: uppercase;
        }

        .e-headercell {
            color: white;
            font-size: 1.5rem;
            font-weight: bold;
        }

        a, a:hover, .highcontrast #dialog a, .highcontrast #dialog a:hover {
            color: inherit;
            text-decoration: none;
        }

        .fabric #target .e-dialog {
            height: 306px;
        }

        .material #target .e-dialog {
            height: 270px;
        }

        .bootstrap4 #target .e-dialog {
            height: 305px;
        }

        #target .e-dialog {
            height: 270px;
        }

        #target {
            height: 500px;
        }

        .e-grid .e-headercell, .e-grid .e-detailheadercell {
            background-color: #24202C;
            border-color: #24202C;
        }

        .e-grid .e-filtered::before {
            color: #ff0000;
            font-size: 18px;
        }

        .e-grid .e-gridheader .e-icons:not(.e-icon-hide):not(.e-check):not(.e-stop) {
            color: #ffffff;
        }

        .e-grid .e-headertext {
            font-size: 13px;
        }

        .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn {
            background-color: deepskyblue;
        }

        .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn-text {
            color: white;
        }

        .fade {
            transition: opacity 0.01s linear;
        }

        .form-group {
            margin-bottom: 0px;
        }

        #Reccontainer_ToolbarSearchBox {
            background-color: #FFFF64;
            color: inherit;
        }

        .e-large {
            width: 73px;
            height: 25px
        }

        .e-switch-wrapper .e-switch-handle.e-switch-active {
            width: 20px;
            height: 20px;
        }

        .e-control-wrapper.BackgroundCustom .e-textbox {
            text-transform: uppercase;
        }

        .e-control-wrapper.conversion .e-textbox {
            text-transform: uppercase;
        }

        .e-switch-wrapper .e-switch-handle {
            width: 20px;
            height: 20px;
        }

        .e-switch-wrapper .e-switch-inner.e-switch-active, .e-css.e-switch-wrapper .e-switch-inner.e-switch-active {
            width: 82px;
            height: 25px;
            background-color: #2cc400;
            border-color: #2cc400;
        }

            .e-switch-wrapper .e-switch-inner.e-switch-active, .e-css.e-switch-wrapper .e-switch-inner.e-switch-active:hover {
                background-color: #239b00 !important;
                border-color: #239b00 !important;
            }

        .e-switch-wrapper .e-switch-inner, .e-css.e-switch-wrapper .e-switch-inner {
            width: 82px;
            height: 25px;
            background-color: red;
            border-color: red;
        }

            .e-switch-wrapper .e-switch-inner, .e-css.e-switch-wrapper .e-switch-inner:hover {
                background-color: darkred !important;
                border-color: darkred !important;
            }

        .e-switch-wrapper .e-switch-on {
            color: #fff;
            background-color: #2cc400;
            border-color: #2cc400;
        }

            .e-switch-wrapper .e-switch-on:hover {
                background-color: #239b00 !important;
                border-color: #239b00 !important;
            }

        .e-switch-wrapper .e-switch-off {
            color: #fff;
            background-color: red;
            border-color: red;
        }

            .e-switch-wrapper .e-switch-off:hover {
                background-color: darkred !important;
                border-color: darkred !important;
            }

        .e-switch-wrapper .e-switch-inner, .e-css.e-switch-wrapper .e-switch-inner.e-switch-active {
            width: 80px;
            height: 25px;
        }

        .showhide {
            font-size: 15px;
            font-weight: 200;
        }

        .icon {
            width: 45px;
        }

        .switch-toggle {
            width: 10em;
        }

            .switch-toggle label:not(.disabled) {
                cursor: pointer;
            }
    </style>

}