@page "/TaskChart"
@using CamcoTasks.Infrastructure.EnumHelper.Enums.Task
@using System.ComponentModel.DataAnnotations
@using CamcoTasks.Service.IService
@inject ITasksService TasksService
@inject IJSRuntime JS

<div class="inline-flex items-center gap-4 p-4 w-full h-full rounded-[16px] flex-col overflow-visible"
     style="background: white; outline: 1px #ECEBE9 solid; outline-offset: -1px;">
    <div class="flex justify-between w-full">
        <div class="flex flex-1 items-start gap-2 py-1">
            <div class="relative w-6 h-6 overflow-visible">
                <!-- Icon placeholder -->
            </div>
            <div class="text-[#171412] text-base font-medium leading-6 font-['Roboto']">
                Task Statuses
            </div>
            <img class="img" src="img/budget-menu-icon.svg" />
        </div>
        <button class="btn btn-primary btn-sm" @onclick="AddNewTask">ADD NEW TASK</button>
    </div>

    <div class="flex-1 h-px outline outline-1 outline-[#ECEBE9] outline-offset-[-0.5px] w-full my-3"></div>

    <div id="spentChart" style="width:100%;min-height:300px;">
        @if (!chartReady)
        {
            <div class="text-center py-10 text-gray-500">Loading chart...</div>
        }
    </div>
</div>

@code {
    public class StatusItemDto
    {
        public StatusType Status { get; set; }
        public string StatusName { get; set; } = string.Empty;
        public int Count { get; set; }
    }

    private List<StatusItemDto> StatusItems { get; set; } = new();
    private List<object> ChartData { get; set; } = new();
    private bool chartReady = false;
    private bool isClientReady = false;
    private int TotalInProgress { get; set; } = 0;
    private bool _hasInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (_hasInitialized) return;
        _hasInitialized = true;

        await LoadChartDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isClientReady = true;
            await RenderChartAsync();
        }
    }

    private async Task LoadChartDataAsync()
    {
        var tasks = (await TasksService.GetAllTasks()).ToList();

        StatusItems = tasks
            .GroupBy(t => t.TaskStatusId.HasValue ? (StatusType)t.TaskStatusId.Value : StatusType.Default)
            .Select(g => new StatusItemDto
            {
                Status = g.Key,
                StatusName = GetEnumDisplayName(g.Key),
                Count = g.Count()
            })
            .ToList();

        TotalInProgress = StatusItems.FirstOrDefault(s => s.Status == StatusType.InProgress)?.Count ?? 0;

        ChartData = StatusItems.Select(item => new Dictionary<string, object>
        {
            { "categoryName", item.StatusName },
            { "actualAmount", item.Count },
            { "color", GetColorForStatus(item.Status) }
        }).ToList<object>();

        chartReady = true;
    }

    private async Task RenderChartAsync()
    {
        try
        {
            if (chartReady && isClientReady)
                await Task.Delay(1000);
            await JS.InvokeVoidAsync("renderSpentChart", ChartData, TotalInProgress);
        }
        catch (JSException ex)
        {
            Console.WriteLine("JS error: " + ex.Message);
        }
    }

    private async Task AddNewTask()
    {
        StatusItems.Add(new StatusItemDto
        {
            Status = StatusType.InProgress,
            StatusName = GetEnumDisplayName(StatusType.InProgress),
            Count = 1
        });

        await RefreshChartAsync();
    }

    private async Task RefreshChartAsync()
    {
        await LoadChartDataAsync();
        await RenderChartAsync();
    }

    private string GetColorForStatus(StatusType status) => status switch
    {
        StatusType.InProgress => "#81B29A",
        StatusType.Pending => "#E07A5F",
        StatusType.WaitingForReview => "#F2CC8F",
        StatusType.Tabled => "#6D597A",
        StatusType.TemporaryTabled => "#B56576",
        StatusType.Done => "#355070",
        _ => "#CCCCCC"
    };

    private static string GetEnumDisplayName(StatusType status)
    {
        var displayAttribute = status.GetType()
            .GetField(status.ToString())?
            .GetCustomAttributes(typeof(DisplayAttribute), false)
            .FirstOrDefault() as DisplayAttribute;

        return displayAttribute?.Name ?? status.ToString();
    }
}
