@page "/TaskChart"
@using CamcoTasks.Infrastructure.EnumHelper.Enums.Task
@using System.ComponentModel.DataAnnotations
@using CamcoTasks.Service.IService
@inject ITasksService TasksService
@inject IJSRuntime JS

<div class="inline-flex items-center gap-4 p-4 w-full h-full rounded-[16px] flex-col overflow-visible"
     style="background: white; outline: 1px #ECEBE9 solid; outline-offset: -1px;">

    <div id="spentChart" style="width:100%;min-height:400px;">
        @if (!chartReady)
        {
            <div class="text-center py-10 text-gray-500">Loading chart...</div>
        }
    </div>
</div>

@code {
    public class StatusItemDto
    {
        public StatusType Status { get; set; }
        public string StatusName { get; set; } = string.Empty;
        public int Count { get; set; }
    }

    public class ChartItem
    {
        public string CategoryName { get; set; } = string.Empty;
        public int ActualAmount { get; set; }
        public string Color { get; set; } = "#cccccc";
    }

    private List<StatusItemDto> StatusItems { get; set; } = new();
    private List<ChartItem> ChartData { get; set; } = new();
    private bool chartReady = false;
    private bool isClientReady = false;
    private bool chartRendered = false;
    private int TotalInProgress { get; set; } = 0;
    private bool _hasInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (_hasInitialized) return;
        _hasInitialized = true;
        await LoadChartDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isClientReady = true;
        }

        if (chartReady && isClientReady && !chartRendered)
        {
            await RenderChartAsync();
            chartRendered = true;
        }
    }

    private async Task LoadChartDataAsync()
    {
        var tasks = (await TasksService.GetAllTasks()).ToList();

        var taskGroups = tasks
            .GroupBy(t => t.TaskStatusId.HasValue ? (StatusType)t.TaskStatusId.Value : StatusType.Default)
            .ToDictionary(g => g.Key, g => g.Count());

        StatusItems = Enum.GetValues<StatusType>()
            .Select(status => new StatusItemDto
            {
                Status = status,
                StatusName = GetEnumDisplayName(status),
                Count = taskGroups.TryGetValue(status, out var count) ? count : 0
            })
            .ToList();

        TotalInProgress = StatusItems.FirstOrDefault(s => s.Status == StatusType.InProgress)?.Count ?? 0;

        ChartData = StatusItems.Select(item => new ChartItem
        {
            CategoryName = item.StatusName,
            ActualAmount = item.Count,
            Color = GetColorForStatus(item.Status)
        }).ToList();

        chartReady = true;
    }

    private async Task RenderChartAsync()
    {
        try
        {
            if (chartReady && isClientReady)
            {
                await Task.Delay(500); // Let DOM stabilize
                await JS.InvokeVoidAsync("renderSpentChart", ChartData, TotalInProgress);
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine("JS error: " + ex.Message);
        }
    }

    private async Task AddNewTask()
    {
        StatusItems.Add(new StatusItemDto
        {
            Status = StatusType.InProgress,
            StatusName = GetEnumDisplayName(StatusType.InProgress),
            Count = 1
        });

        await RefreshChartAsync();
    }

    private async Task RefreshChartAsync()
    {
        chartRendered = false;
        await LoadChartDataAsync();
        // Rendering will occur in OnAfterRenderAsync
    }

    private string GetColorForStatus(StatusType status) => status switch
    {
        StatusType.InProgress => "#007bff",
        StatusType.Pending => "#dc3434",
        StatusType.WaitingForReview => "#7ec2f3",
        StatusType.Tabled => "#ff1493",
        StatusType.TemporaryTabled => "#d2b045",
        StatusType.Done => "#28a745",
        StatusType.Default => "#CCCCCC",
        _ => "#206d62",
    };

    private static string GetEnumDisplayName(StatusType status)
    {
        var displayAttribute = status.GetType()
            .GetField(status.ToString())?
            .GetCustomAttributes(typeof(DisplayAttribute), false)
            .FirstOrDefault() as DisplayAttribute;

        return displayAttribute?.Name ?? status.ToString();
    }
}
