@page "/TaskChart"
@inject IJSRuntime JS
 
<div class="inline-flex items-center gap-4 p-4 w-full h-full rounded-[16px] flex-col overflow-visible"
     style="background: white; outline: 1px #ECEBE9 solid; outline-offset: -1px;">
<div class="flex justify-between w-full">
    <div class="flex flex-1 items-start gap-2 py-1">
        <div class="relative w-6 h-6 overflow-visible">
            <!-- Icon placeholder -->
        </div>
        <div class="text-[#171412] text-base font-medium leading-6 font-['Roboto']">
            Budget Expense
        </div>
            <img class="img" src="img/budget-menu-icon.svg" />
        </div>
        <div class="text-[#171412] text-base font-medium leading-6 font-['Roboto']">
            Budget Expense
        </div>
    </div>
    <button class="btn btn-primary btn-sm" @onclick="AddNewTask">ADD NEW TASK</button>
</div>
 
    <div class="flex-1 h-px outline outline-1 outline-[#ECEBE9] outline-offset-[-0.5px] w-full my-3"></div>
 
 
    <div id="spentChart" class="w-full aspect-[1/2] md:aspect-[4/2] max-w-full h-auto">
        @if (!chartReady)
        {
<div class="text-center py-10 text-gray-500">Loading chart...</div>
        }
</div>
 
 
@code {
    public class BudgetItemDto
    {
        public string? CategoryName { get; set; }
        public decimal ActualAmount { get; set; }
    }
 
 
    bool showAddTaskFormPopup = false;
    private List<BudgetItemDto> BudgetItems { get; set; } = new()
    {
        new BudgetItemDto { CategoryName = "Invitations & Stationary", ActualAmount = 500 },
        new BudgetItemDto { CategoryName = "Decor & Design", ActualAmount = 300 },
        new BudgetItemDto { CategoryName = "Food & Beverage", ActualAmount = 400 }
    };
    private List<object> ChartData { get; set; } = new();
    private bool chartReady = false;
 
    private bool componentRendered = false;
    private bool hasRenderedChart = false;
    private decimal TotalSpent { get; set; } = 0;
    private bool isClientReady = false;
    private bool _hasInitialized;
    protected override async Task OnParametersSetAsync()
    {
        if (isClientReady)
        {
            await LoadChartDataAsync();
 
            if (chartReady)
            {
                await RenderChartAsync();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (_hasInitialized)
            return;
 
        _hasInitialized = true;
        try
        {
            await LoadChartDataAsync();
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    void ShowAddTaskFormPopup()
    {
        showAddTaskFormPopup = true;
    }
    private async Task RefreshTasksDataAsync()
    {
        await LoadChartDataAsync();
        showAddTaskFormPopup = false;
    }
    public async Task LoadChartDataAsync()
    {
 
        var items = BudgetItems;

        if (items != null && items.Any())
        {
            BudgetItems = items
                .Where(item => !string.IsNullOrEmpty(item.CategoryName))
                .GroupBy(item => item.CategoryName!)
                .Select(group => new BudgetItemDto
                {
                    CategoryName = group.Key,
                    ActualAmount = group.Sum(i => i.ActualAmount)
                })
                .ToList();
        }
        else
        {
            BudgetItems = new List<BudgetItemDto>();
        }
 
        TotalSpent = BudgetItems.Sum(b => b.ActualAmount);
 
        ChartData = BudgetItems.Select(item => new
        {
            categoryName = item.CategoryName,
            actualAmount = item.ActualAmount,
            color = GetColorForCategory(item.CategoryName)
        }).ToList<object>();
 
        chartReady = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isClientReady = true;
 
            await LoadChartDataAsync();
 
            if (chartReady)
            {
                await RenderChartAsync();
            }
        }
    }
 
    private async Task RenderChartAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("renderSpentChart", ChartData, TotalSpent);
        }
        catch (JSException ex)
        {
            Console.WriteLine("JS error: " + ex.Message);
        }
    }

    private int nextTaskId = 1;

    private async Task AddNewTask()
    {
        BudgetItems.Add(new BudgetItemDto
        {
            CategoryName = $"Task {nextTaskId}",
            ActualAmount = 0
        });
        nextTaskId++;
        await RefreshChartAsync();
    }

    private async Task RefreshChartAsync()
    {
        TotalSpent = BudgetItems.Sum(b => b.ActualAmount);
        ChartData = BudgetItems.Select(item => new
        {
            categoryName = item.CategoryName,
            actualAmount = item.ActualAmount,
            color = GetColorForCategory(item.CategoryName)
        }).ToList<object>();
        chartReady = true;
        if (isClientReady)
        {
            await RenderChartAsync();
        }
    }
    private string GetColorForCategory(string? name) => name switch
    {
        "Invitations & Stationary" => "img/Respond.png",
        "Decor & Design" => "img/ViewEmail.svg",
        "Food & Beverage" => "img/Note1.png",

        _ => "#CCCCCC" // Default color for unknown categories
    };
}